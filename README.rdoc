== Description

Ruby Interactive Print Loop - A light, modular alternative to irb

== Install

Install the gem with:

    sudo gem install ripl

== Features

* Similar to irb
  * Reads ~/.irbrc on startup
  * Appends to ~/.irb_history on exit
  * Autocompletion (from bond)
  * _ for last result
  * Type 'exit' or Ctrl-D to exit
  * 6 common commandline options: -f, -r, -I, -d, -h, -v
  * IRB.conf -> Ripl.config
* Enhancements over irb
  * ~/.irbrc errors caught
  * Easily extendable with plugins
  * ~150 loc vs irb's 5000+ loc
  * Customizable completion and completion of method arguments (from bond)
  * Easy to create custom shells for gems and apps i.e. Ripl.start
  * Easy to create and invoke ripl subcommands
* Different from irb
  * No multi-line evaluation
  * No irb subsessions or workspaces
  * No IRB.conf features i.e. preconfigured prompts and auto indent

Note: Irb features not in ripl can be implemented as plugins.

== Philosophy

ripl is a light, flexible repl(shell) meant to lay the foundation for customizable ruby shells. It
provides an environment for plugins to share and reuse best practices for shells. ripl can be
easily customized for gems, applications and is even usable on the web (examples forthcoming).

== Usage

    $ ripl
    >> ...

== Create Plugins

A ripl plugin is a module that is included into Ripl::Shell. As an example let's color error
messages red. Knowing that error messages are formatted by format_error() and terminal strings are
encoded red in the format "\e[31m%s\e[m", this plugin becomes:

    module Ripl
      module RedError
        def format_error(error)
          "\e[31m#{super}\e[m"
        end
      end
    end
    Ripl::Shell.send :include, Ripl::RedError

Note this plugin extends format_error() by invoking the original format_error() with super.  Also
note that plugins are just modules and thus can be packaged as gems and reused across shells as
needed.

ripl encourages plugins by making most of its shell available to plugins. For methods that can be
extended by plugins, see Ripl::Pluggable.

== Create Custom Shells

Creating and starting a custom shell is as simple as:

    require 'ripl'
    # Define plugins, load files, etc...
    Ripl.start

Ripl.start takes options to customize your shell. For example if you wanted to
start on a specific binding:

    Ripl.start :binding => my_desired_binding

== Create Commands

If you want to invoke your custom shell with ripl, make it a ripl command.
To create one, create an executable in the format ripl-<command> and make sure it's in your shell's
$PATH. For example, the file 'ripl-my_gem' would be invoked with `ripl my_gem`. Note that with your
command you can take arguments and parse your options as you please. For an example command,
see {ripl-rails}[http://github.com/cldwalker/ripl-rails].

== Credits
* janlelis for bug fix and tweaks

== irb alternatives
Some other irb alternatives to check out:

* {ir}[http://github.com/raggi/ir]: nice and light
* {irb2}[http://github.com/wycats/irb2]: yehuda katz's partial attempt at rewriting irb
* {dietrb}[http://github.com/alloy/dietrb]: mac and ruby 1.9 specific

== Todo
* Everything (tests especially)!
